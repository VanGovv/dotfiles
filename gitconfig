[push]
	default = current
	followTags = true
	autoSetupRemote = true
[log]
	abbrevCommit = true
	oneline = true
	date = format:%d.%m.%y
	mailmap = true
[format]
	pretty = %C(yellow)%h %C(green)%cd %C(blue)%<(7)%aN%C(red)%d%C(reset) %s
[core]
	excludesfile = ~/.gitignore
	editor = nano
[fetch]
	prune = true
[submodule]
	recurse = true
[alias]
	a = add
	b = branch
	bl = for-each-ref refs/heads/ --format='%(HEAD) %(color:yellow)%(refname:short) %(color:green)%(committerdate:relative)  %(color:blue)%(committername)  %(color:reset)%(contents:subject)' --sort=committerdate
	blr = for-each-ref refs/remotes/ --format='%(HEAD) %(color:yellow)%(refname:short) %(color:green)%(committerdate:relative)  %(color:blue)%(committername)  %(color:reset)%(contents:subject)' --sort=committerdate
	bla = for-each-ref refs/heads/ refs/remotes/ --format='%(HEAD) %(color:yellow)%(refname:short) %(color:green)%(committerdate:relative)  %(color:blue)%(committername)  %(color:reset)%(contents:subject)' --sort=committerdate
	c = commit
	cm = commit -m 
	co = checkout
	ch = cherry-pick
	d = diff
	f = fetch
	l = log
	m = merge
	r = rebase
	del = "! f() { git branch -D $1; git push origin :$1 }; f"
	r1 = reset HEAD~1
	ri = "! f() { git rebase -i ${1-HEAD~5}; }; f"
	rc = rebase --continue
	ra = rebase --abort
	ds = "! f() { ref=${1-HEAD}; git diff $ref~1..$ref $2; }; f"
	dsf = "! f() { ref=${1-HEAD}; git diff --name-status $ref~1..$ref $2; }; f"
	rs = "! f() { ref=${1-1}; git reset HEAD~$ref $2; }; f"
	s = "! f() { git status; echo; git log -n 1; }; f"
	aa = "! f() { git add --all; git commit --amend --no-edit; }; f"
	aap = "! f() { git add --all; git commit --amend --no-edit; git push --force; }; f"
	apf = "! f() { git commit --amend --no-edit; git push --force; }; f"
	aapf = "! f() { git add --all; git commit --amend --no-edit; git push --force; }; f"
	ac = "! f() { git add --all; git commit --message=\"$1\"; }; f"
	acp = "! f() { git add --all; git commit --message=\"$1\"; git push; }; f"
	pf = "! f() { git push --force; }; f"
	cp = "! f() { git commit --message=\"$1\"; git push; }; f"
	cpf = "! f() { git commit --message=\"$1\"; git push --force; }; f"
	acpf = "! f() { git add --all; git commit --message=\"$1\"; git push --force; }; f"
	amend = "! f() { git commit --amend; }; f"
	mad = "! f() { git merge $1 --ff-only; git push; git branch -d $1; git push origin :$1; }; f"
	wip = "! f() { msg=${1-WIP}; git commit --message=\"$msg\"; }; f"
	awip = "! f() { git add --all; msg=${1-WIP}; git commit --message=\"$msg\"; }; f"
